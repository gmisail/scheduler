---
import type { Department } from "@lib/department";
import {
    type CatalogItem,
    type CourseItem,
    type Course,
    type Section,
    timeToMinutes,
} from "@lib/catalog";

import Layout from "../../layouts/Layout.astro";
import CourseCard from "../../components/catalog/CourseCard.svelte";

export async function getStaticPaths() {
    const response = await fetch(
        "https://pub-64d1712225e343d78b0dbf7c06803c3a.r2.dev/uvm/2025-09/departments.json",
    );
    const data = (await response.json()) as Department[];

    const catalogRes = await fetch(
        "https://pub-64d1712225e343d78b0dbf7c06803c3a.r2.dev/uvm/2025-09/catalog.json",
    );
    const catalog = (await catalogRes.json()) as CatalogItem[];

    return data.map((department) => {
        const id = department.id.toUpperCase();
        const name = department.name;

        const courses = catalog
            .filter((item) => {
                const course = item.course;
                return course.subject == id;
            })
            .map((item): Course => {
                let course = item.course;

                const sections = course.sections
                    .map((section): Section => {
                        const days = new Map(
                            section.days.map((day) => {
                                const blocks = day.blocks
                                    .map((block) => {
                                        return {
                                            ...block,
                                            start_time: timeToMinutes(
                                                block.start_time,
                                            ),
                                            end_time: timeToMinutes(
                                                block.end_time,
                                            ),
                                        };
                                    })
                                    .toSorted(
                                        (a, b) => a.start_time - b.start_time,
                                    );

                                return [day.day, blocks];
                            }),
                        );

                        return {
                            id: section.id,
                            course_id: course.id,
                            crn: section.crn,
                            sec: section.sec,
                            days,
                        };
                    })
                    .toSorted((a: Section, b: Section) => {
                        return a.crn - b.crn;
                    });

                return {
                    ...course,
                    sections,
                };
            })
            .toSorted((a: Course, b: Course) => {
                return a.number.localeCompare(b.number);
            });

        return {
            params: { id },
            props: { name, courses },
        };
    });
}

const { id } = Astro.params;
const { name, courses } = Astro.props;
---

<Layout>
    <h2 class="dark:text-white text-xl font-semibold mb-4">{name}</h2>

    <div class="space-y-2">
        {
            courses.length > 0 ? (
                courses.map((course) => (
                    <CourseCard client:load course={course} />
                ))
            ) : (
                <div class="dark:text-white">
                    Could not find any courses for this department.
                </div>
            )
        }
    </div>
</Layout>
